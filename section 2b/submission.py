
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###͏︌͏󠄁͏︉
#################################################
# file to edit: notebook.ipynb͏︌͏󠄁͏︉

import time
from isolation import Board

# Credits if any͏︌͏󠄁͏︉
# 1)͏︌͏󠄁͏︉
# 2)͏︌͏󠄁͏︉
# 3)͏︌͏󠄁͏︉

class OpenMoveEvalFn:
    def score(self, game, my_player=None):
        """Score the current game state
        Evaluation function that outputs a score equal to how many
        moves are open for AI player on the board minus how many moves
        are open for Opponent's player on the board.

        Note:
            If you think of better evaluation function, do it in CustomEvalFn below.

            Args
                game (Board): The board and game state.
                my_player (Player object): This specifies which player you are.

            Returns:
                float: The current state's score. MyMoves-OppMoves.

            """

        # TODO: finish this function!͏︌͏󠄁͏︉
        # raise NotImplementedError

        my_moves = game.get_player_moves(my_player=my_player)
        op_moves = game.get_opponent_moves(my_player=my_player)

        # Calculate the number of moves of each player and score
        score = len(my_moves) - len(op_moves)
        return score



######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︌͏󠄁͏︉
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︌͏󠄁͏︉
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︌͏󠄁͏︉
################ END OF LOCAL TEST CODE SECTION ######################͏︌͏󠄁͏︉

class CustomPlayer:
    # TODO: finish this class!͏︌͏󠄁͏︉
    """Player that chooses a move using your evaluation function
    and a minimax algorithm with alpha-beta pruning.
    You must finish and test this player to make sure it properly
    uses minimax and alpha-beta to return a good move."""

    def __init__(self, search_depth=4, eval_fn=OpenMoveEvalFn()):
        """Initializes your player.

        if you find yourself with a superior eval function, update the default
        value of `eval_fn` to `CustomEvalFn()`

        Args:
            search_depth (int): The depth to which your agent will search
            eval_fn (function): Evaluation function used by your agent
        """
        self.eval_fn = eval_fn
        self.search_depth = search_depth

    def move(self, game, time_left):
        """Called to determine one move by your agent

        Note:
            1. Do NOT change the name of this 'move' function. We are going to call
            this function directly.
            2. Call alphabeta instead of minimax once implemented.
        Args:
            game (Board): The board and game state.
            time_left (function): Used to determine time left before timeout

        Returns:
            tuple: (int,int): Your best move
        """
        best_move = None # Initialize the best move
        try:
            for depth in range(1, self.search_depth+1):

                best_move, utility = alphabeta(self, game, time_left, depth=depth)
        except TimeoutError:
            pass # If timeout, break the loop and return the best move found so far

        return best_move



    def utility(self, game, my_turn):
        """You can handle special cases here (e.g. endgame)"""

        return self.eval_fn.score(game, self)



###################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE CLASS! ################͏︌͏󠄁͏︉
###### IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ###########͏︌͏󠄁͏︉
###################################################################


def minimax(player, game, time_left, depth, my_turn=True):
    """Implementation of the minimax algorithm.
    Args:
        player (CustomPlayer): This is the instantiation of CustomPlayer()
            that represents your agent. It is used to call anything you
            need from the CustomPlayer class (the utility() method, for example,
            or any class variables that belong to CustomPlayer()).
        game (Board): A board and game state.
        time_left (function): Used to determine time left before timeout
        depth: Used to track how deep you are in the search tree
        my_turn (bool): True if you are computing scores during your turn.

    Returns:
        (tuple, int): best_move, val
    """

    # TODO: finish this function!͏︌͏󠄁͏︉
    # raise NotImplementedError

    # Call evaluation function
    # utility = OpenMoveEvalFn.score(game, player)
    if depth == 0  or not game.get_active_moves():
        return None,player.utility(game,my_turn)

    best_move = None
    if my_turn:
        best_value = float("-inf") # Initialize best value

        # Get all legal moves of my player
        legal_moves= game.get_player_moves(my_player = player)
        for state in legal_moves:
            # Get new board after this move
            new_board, is_over, winner = game.forecast_move(state)
            # If the game is over
            if is_over:
                return state, player.utility(new_board, my_turn)

            # Call opponent's turn
            m, value = minimax(player, new_board, time_left, depth-1, my_turn=False)
            # If larger value is found, update the best move and best value
            if best_value< value:
                best_move = state
                best_value = value

        return best_move, best_value

    else: # Minimize opponent player
        best_value = float("inf") # Initialize best value
        legal_moves = game.get_opponent_moves(my_player = player)
        for state in legal_moves:
            new_board, is_over, winner = game.forecast_move(state)
            if is_over:
                return state, player.utility(new_board, my_turn)
            # Call my player's turn
            m, value = minimax(player, new_board, time_left, depth-1, my_turn=True)
            # If lower value is found, update the best move
            if best_value > value:
                best_move = state
                best_value = value
        return best_move, best_value


######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︌͏󠄁͏︉
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︌͏󠄁͏︉
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︌͏󠄁͏︉
################ END OF LOCAL TEST CODE SECTION ######################͏︌͏󠄁͏︉

def alphabeta(player, game, time_left, depth, alpha=float("-inf"), beta=float("inf"), my_turn=True):
    """Implementation of the alphabeta algorithm.

    Args:
        player (CustomPlayer): This is the instantiation of CustomPlayer()
            that represents your agent. It is used to call anything you need
            from the CustomPlayer class (the utility() method, for example,
            or any class variables that belong to CustomPlayer())
        game (Board): A board and game state.
        time_left (function): Used to determine time left before timeout
        depth: Used to track how deep you are in the search tree
        alpha (float): Alpha value for pruning
        beta (float): Beta value for pruning
        my_turn (bool): True if you are computing scores during your turn.

    Returns:
        (tuple, int): best_move, val
    """

    # TODO: finish this function!͏︌͏󠄁͏︉
    # raise NotImplementedError

    if depth == 0  or not game.get_active_moves():
        return None,player.utility(game,my_turn)

    best_move = None
    if time_left() < 10:
        return best_move, player.utility(game,my_turn)
    if my_turn:
        best_value = float("-inf") # Initialize best value

        # Get all legal moves of my player
        legal_moves= game.get_player_moves(my_player = player)
        for state in legal_moves:
            # Get new board after this move
            new_board, is_over, winner = game.forecast_move(state)
            # If the game is over
            if is_over:
                return state, player.utility(new_board, my_turn)

            # Call opponent's turn
            m, value = alphabeta(player, new_board, time_left, depth-1, alpha, beta, my_turn=False)
            # If larger value is found, update the best move and best value
            if best_value< value:
                best_move = state
                best_value = value
            # AlphaBeta pruning
            alpha = max(alpha, best_value)
            if alpha >= beta:
                break

        return best_move, best_value

    else: # Minimize opponent player
        best_value = float("inf") # Initialize best value
        legal_moves = game.get_opponent_moves(my_player = player)
        for state in legal_moves:
            new_board, is_over, winner = game.forecast_move(state)
            if is_over:
                return state, player.utility(new_board, my_turn)
            # Call my player's turn
            m, value = alphabeta(player, new_board, time_left, depth-1, alpha=float("-inf"), beta=float("inf"), my_turn=True)
            # If lower value is found, update the best move
            if best_value > value:
                best_move = state
                best_value = value
            # AlphaBeta pruning
            beta = min(beta, best_value)
            if alpha >= beta:
                break
        return best_move, best_value
######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################͏︌͏󠄁͏︉
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︌͏󠄁͏︉
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######͏︌͏󠄁͏︉
################ END OF LOCAL TEST CODE SECTION ######################͏︌͏󠄁͏︉

class CustomEvalFn:
    def __init__(self):
        pass

    def score(self, game, my_player=None):
        """Score the current game state.

        Custom evaluation function that acts however you think it should. This
        is not required but highly encouraged if you want to build the best
        AI possible.

        Args:
            game (Board): The board and game state.
            my_player (Player object): This specifies which player you are.

        Returns:
            float: The current state's score, based on your own heuristic.
        """

        # TODO: finish this function!͏︌͏󠄁͏︉
        #raise NotImplementedError

        my_moves = game.get_player_moves(my_player=my_player)
        op_moves = game.get_opponent_moves(my_player=my_player)

        potential= sum(1 for state in game.get_player_moves(my_player=my_player)
        if state in  game.get_opponent_moves(my_player=my_player) )
        # sum = 0
        # for state in game.get_player_moves(my_player=my_player):
        #     if state in  game.get_opponent_moves(my_player=my_player):
        #         sum += 1
        # Calculate the number of moves of each player and score
        score = (2*len(my_moves)) - (3*len(op_moves)) + (1.5 * potential)
        return score
######################################################################
############ DON'T WRITE ANY CODE OUTSIDE THE CLASS! #################͏︌͏󠄁͏︉
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############͏︌͏󠄁͏︉
######################################################################
